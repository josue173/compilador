Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FOR
    NEWLINE
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> INT IDENTIFIER
Rule 2     statement -> FLOAT IDENTIFIER
Rule 3     statement -> BOOL IDENTIFIER
Rule 4     statement -> expression
Rule 5     statement -> assignment
Rule 6     expression -> expression PLUS expression
Rule 7     expression -> expression MINUS expression
Rule 8     expression -> expression TIMES expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> NUMBER
Rule 11    expression -> IDENTIFIER
Rule 12    assignment -> IDENTIFIER ASSIGN expression
Rule 13    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

ASSIGN               : 12
BOOL                 : 3
COMMENT              : 
DIVIDE               : 9
FLOAT                : 2
FOR                  : 
IDENTIFIER           : 1 2 3 11 12
INT                  : 1
LPAREN               : 13
MINUS                : 7
NEWLINE              : 
NUMBER               : 10
PLUS                 : 6
RPAREN               : 13
TIMES                : 8
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 5
expression           : 4 6 6 7 7 8 8 9 9 12 13
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . INT IDENTIFIER
    (2) statement -> . FLOAT IDENTIFIER
    (3) statement -> . BOOL IDENTIFIER
    (4) statement -> . expression
    (5) statement -> . assignment
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN
    (12) assignment -> . IDENTIFIER ASSIGN expression

    INT             shift and go to state 2
    FLOAT           shift and go to state 4
    BOOL            shift and go to state 5
    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 3
    LPAREN          shift and go to state 9

    statement                      shift and go to state 1
    expression                     shift and go to state 6
    assignment                     shift and go to state 7

state 1

    (0) S' -> statement .



state 2

    (1) statement -> INT . IDENTIFIER

    IDENTIFIER      shift and go to state 10


state 3

    (11) expression -> IDENTIFIER .
    (12) assignment -> IDENTIFIER . ASSIGN expression

    PLUS            reduce using rule 11 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 11 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 11 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)
    ASSIGN          shift and go to state 11


state 4

    (2) statement -> FLOAT . IDENTIFIER

    IDENTIFIER      shift and go to state 12


state 5

    (3) statement -> BOOL . IDENTIFIER

    IDENTIFIER      shift and go to state 13


state 6

    (4) statement -> expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    $end            reduce using rule 4 (statement -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 7

    (5) statement -> assignment .

    $end            reduce using rule 5 (statement -> assignment .)


state 8

    (10) expression -> NUMBER .

    PLUS            reduce using rule 10 (expression -> NUMBER .)
    MINUS           reduce using rule 10 (expression -> NUMBER .)
    TIMES           reduce using rule 10 (expression -> NUMBER .)
    DIVIDE          reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    RPAREN          reduce using rule 10 (expression -> NUMBER .)


state 9

    (13) expression -> LPAREN . expression RPAREN
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 18

state 10

    (1) statement -> INT IDENTIFIER .

    $end            reduce using rule 1 (statement -> INT IDENTIFIER .)


state 11

    (12) assignment -> IDENTIFIER ASSIGN . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 20

state 12

    (2) statement -> FLOAT IDENTIFIER .

    $end            reduce using rule 2 (statement -> FLOAT IDENTIFIER .)


state 13

    (3) statement -> BOOL IDENTIFIER .

    $end            reduce using rule 3 (statement -> BOOL IDENTIFIER .)


state 14

    (6) expression -> expression PLUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 21

state 15

    (7) expression -> expression MINUS . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 22

state 16

    (8) expression -> expression TIMES . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 23

state 17

    (9) expression -> expression DIVIDE . expression
    (6) expression -> . expression PLUS expression
    (7) expression -> . expression MINUS expression
    (8) expression -> . expression TIMES expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER
    (13) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    IDENTIFIER      shift and go to state 19
    LPAREN          shift and go to state 9

    expression                     shift and go to state 24

state 18

    (13) expression -> LPAREN expression . RPAREN
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 19

    (11) expression -> IDENTIFIER .

    RPAREN          reduce using rule 11 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 11 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 11 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 11 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)


state 20

    (12) assignment -> IDENTIFIER ASSIGN expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    $end            reduce using rule 12 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17


state 21

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 6 (expression -> expression PLUS expression .)
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17

  ! TIMES           [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 22

    (7) expression -> expression MINUS expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 7 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 7 (expression -> expression MINUS expression .)
    $end            reduce using rule 7 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 7 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 16
    DIVIDE          shift and go to state 17

  ! TIMES           [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 23

    (8) expression -> expression TIMES expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 8 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 8 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 8 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 8 (expression -> expression TIMES expression .)
    $end            reduce using rule 8 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 8 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 24

    (9) expression -> expression DIVIDE expression .
    (6) expression -> expression . PLUS expression
    (7) expression -> expression . MINUS expression
    (8) expression -> expression . TIMES expression
    (9) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 9 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]
  ! TIMES           [ shift and go to state 16 ]
  ! DIVIDE          [ shift and go to state 17 ]


state 25

    (13) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 13 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 13 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 13 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 13 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 13 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 13 (expression -> LPAREN expression RPAREN .)

