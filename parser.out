Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMMENT
    FLOAT
    FOR
    INT
    NEWLINE
    WHILE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> assignment
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> expression TIMES expression
Rule 6     expression -> expression DIVIDE expression
Rule 7     expression -> NUMBER
Rule 8     expression -> IDENTIFIER
Rule 9     assignment -> IDENTIFIER ASSIGN expression
Rule 10    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

ASSIGN               : 9
BOOL                 : 
COMMENT              : 
DIVIDE               : 6
FLOAT                : 
FOR                  : 
IDENTIFIER           : 8 9
INT                  : 
LPAREN               : 10
MINUS                : 4
NEWLINE              : 
NUMBER               : 7
PLUS                 : 3
RPAREN               : 10
TIMES                : 5
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 2
expression           : 1 3 3 4 4 5 5 6 6 9 10
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . assignment
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN
    (9) assignment -> . IDENTIFIER ASSIGN expression

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 5
    LPAREN          shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2
    assignment                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 3

    (2) statement -> assignment .

    $end            reduce using rule 2 (statement -> assignment .)


state 4

    (7) expression -> NUMBER .

    PLUS            reduce using rule 7 (expression -> NUMBER .)
    MINUS           reduce using rule 7 (expression -> NUMBER .)
    TIMES           reduce using rule 7 (expression -> NUMBER .)
    DIVIDE          reduce using rule 7 (expression -> NUMBER .)
    $end            reduce using rule 7 (expression -> NUMBER .)
    RPAREN          reduce using rule 7 (expression -> NUMBER .)


state 5

    (8) expression -> IDENTIFIER .
    (9) assignment -> IDENTIFIER . ASSIGN expression

    PLUS            reduce using rule 8 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 8 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 8 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 8 (expression -> IDENTIFIER .)
    $end            reduce using rule 8 (expression -> IDENTIFIER .)
    ASSIGN          shift and go to state 11


state 6

    (10) expression -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 12

state 7

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 14

state 8

    (4) expression -> expression MINUS . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 15

state 9

    (5) expression -> expression TIMES . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 16

state 10

    (6) expression -> expression DIVIDE . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 17

state 11

    (9) assignment -> IDENTIFIER ASSIGN . expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . expression TIMES expression
    (6) expression -> . expression DIVIDE expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER
    (10) expression -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 4
    IDENTIFIER      shift and go to state 13
    LPAREN          shift and go to state 6

    expression                     shift and go to state 18

state 12

    (10) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 19
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 13

    (8) expression -> IDENTIFIER .

    RPAREN          reduce using rule 8 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 8 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 8 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 8 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 8 (expression -> IDENTIFIER .)
    $end            reduce using rule 8 (expression -> IDENTIFIER .)


state 14

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 15

    (4) expression -> expression MINUS expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 4 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]


state 16

    (5) expression -> expression TIMES expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 5 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 5 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 5 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 5 (expression -> expression TIMES expression .)
    $end            reduce using rule 5 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 17

    (6) expression -> expression DIVIDE expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 6 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 6 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 6 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 6 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 6 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]


state 18

    (9) assignment -> IDENTIFIER ASSIGN expression .
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression
    (5) expression -> expression . TIMES expression
    (6) expression -> expression . DIVIDE expression

    $end            reduce using rule 9 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10


state 19

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)

