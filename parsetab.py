
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEASSIGN BOOL COMMENT DIVIDE FLOAT FOR IDENTIFIER INT LPAREN MINUS NEWLINE NUMBER PLUS RPAREN TIMES WHILEstatement : INT IDENTIFIER\n| FLOAT IDENTIFIER\n| BOOL IDENTIFIERstatement : expression\n| assignmentexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : NUMBERexpression : IDENTIFIERassignment : IDENTIFIER ASSIGN expressionexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'INT':([0,],[2,]),'FLOAT':([0,],[4,]),'BOOL':([0,],[5,]),'NUMBER':([0,9,11,14,15,16,17,],[8,8,8,8,8,8,8,]),'IDENTIFIER':([0,2,4,5,9,11,14,15,16,17,],[3,10,12,13,19,19,19,19,19,19,]),'LPAREN':([0,9,11,14,15,16,17,],[9,9,9,9,9,9,9,]),'$end':([1,3,6,7,8,10,12,13,19,20,21,22,23,24,25,],[0,-11,-4,-5,-10,-1,-2,-3,-11,-12,-6,-7,-8,-9,-13,]),'PLUS':([3,6,8,18,19,20,21,22,23,24,25,],[-11,14,-10,14,-11,14,-6,-7,-8,-9,-13,]),'MINUS':([3,6,8,18,19,20,21,22,23,24,25,],[-11,15,-10,15,-11,15,-6,-7,-8,-9,-13,]),'TIMES':([3,6,8,18,19,20,21,22,23,24,25,],[-11,16,-10,16,-11,16,16,16,-8,-9,-13,]),'DIVIDE':([3,6,8,18,19,20,21,22,23,24,25,],[-11,17,-10,17,-11,17,17,17,-8,-9,-13,]),'ASSIGN':([3,],[11,]),'RPAREN':([8,18,19,21,22,23,24,25,],[-10,25,-11,-6,-7,-8,-9,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,9,11,14,15,16,17,],[6,18,20,21,22,23,24,]),'assignment':([0,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> INT IDENTIFIER','statement',2,'p_statement_declaration','semantic.py',28),
  ('statement -> FLOAT IDENTIFIER','statement',2,'p_statement_declaration','semantic.py',29),
  ('statement -> BOOL IDENTIFIER','statement',2,'p_statement_declaration','semantic.py',30),
  ('statement -> expression','statement',1,'p_statement_expr','semantic.py',35),
  ('statement -> assignment','statement',1,'p_statement_expr','semantic.py',36),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','semantic.py',40),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','semantic.py',41),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','semantic.py',42),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','semantic.py',43),
  ('expression -> NUMBER','expression',1,'p_expression_number','semantic.py',47),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','semantic.py',51),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','semantic.py',57),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_grouped_expression','semantic.py',63),
]
